/************************************************************************'
* 
* McMuon muon ray tracing software
* Copyright, All Rights Reserved
* Risoe-DTU, Roskilde, Denmark
*
*
* Component: Source_pt
*
* Written by: Erik Knudsen
* Date: June 29th, 2009
* Version: $Revision$
* Origin: Risoe
* Release: McXtrace 0.1
*
* An x-ray point source
* 
* %D
* A simple source model emitting photons from a point source uniformly into 4pi. A square target centered
* on the Z-axis restricts the beam to that aperture.
* If an input spectrum datafile (spectrum_file) is not specified, the beam is restricted to emit photons between E0+-dE keV, or lambda0+-dlambda Å, whichever is given.
* The input spectrum file should be formatted such that x-ray energy/wavelength is in the first column and the intensity in the second. Any preceding
* lines starting with # are considered part of the file header. If a datafile is given, a nonzero E¤0 value indicates that is is parametrized by energy ( in keV)
* as opposed to wavelength (in Å). Wavelength is the default. 
* Flux is given in the unit photons/s
* 
* Example: Source_pt(dist=1,focus_xw=0.1,focus_yh=0.1, lamda=0.231, dlambda=0.002)
*
*
* %P
* focus_xw:[m]  Width of target
* focus_yh:[m]  Height of target
* lambda0:[AA]  Mean wavelength of x-rays.
* dlambda:[AA]  Wavelength half spread of x-rays (flat or gaussian sigma).
* E0:     [keV] Mean energy of xrays.
* dE:     [keV] Energy half spread of x-rays.
* gauss:  [1]   Gaussian (1) or Flat (0) energy/wavelength distribution
* dist:   [m]   Distance from source plane to sampling window.
* flux:   [ph/s] Total flux radiated from the source. 
* 
*/

DEFINE COMPONENT Muon_source
DEFINITION PARAMETERS (string spectrum_file=NULL)
SETTING PARAMETERS (focus_xw=0,focus_yh=0,flux=0,dist=1,E0=0, dE=0, lambda0=0,dlambda=0,phase=-1,randomphase=0,gauss=0)
OUTPUT PARAMETERS (prms)
/* X-ray parameters: (x,y,z,kx,ky,kz,phi,t,Ex,Ey,Ez,p) */ 

SHARE
%{
  %include "read_table-lib"
%}


DECLARE
%{
  double e,l;
  struct {
    double l0,dl;
    double pmul,pint;
    t_Table T;
  } prms;

%}

INITIALIZE
%{
  double fi_x,fi_y,t_ome;
  /*input logic*/
  if(dist<=0 || focus_yh<=0 || focus_xw<=0){
    fprintf(stderr,"Source_pt (%s): Error: Target area unmeaningful! (negative dist / focus_xw / focus_yh)\n",
           NAME_CURRENT_COMP);
    exit(0);
  }
  fi_x=atan(focus_xw/2.0/dist);
  fi_y=atan(focus_yh/2.0/dist);
  
  /*fractional solid angle subtended by the target*/
  t_ome=asin(sin(fi_y)*sin(fi_x))/M_PI;
  

  if (flux){
    prms.pmul=flux;
  }else{
    prms.pmul=1;
  }
  prms.pmul*=t_ome/(double)mcget_ncount();
%}

TRACE
%{
  double v,l,e;
  /*point source*/
  p=prms.pmul;
  x=0;y=0;z=0;
 
  /*draw random coordinates in the acceptance window*/
  vx= (focus_xw/2.0 * randpm1());
  vy= (focus_yh/2.0 * randpm1());
  vz= dist;
  NORM(vx,vy,vz);  

  /*figure muon speed*/
  v=1;


  vx*=v;
  vy*=v;
  vz*=v;

  /*set polarization vector*/
  sx=0;sy=0;sz=1;

  /*set time*/
  t=0.0+randnorm()*1e-12;

%}

FINALLY
%{
  Table_Free(&(prms.T));
%}

MCDISPLAY
%{
  double radius=0.05;
  magnify("xy");
  circle("xy",0,0,0,radius);
  circle("xz",0,0,0,radius);
  circle("yz",0,0,0,radius);
%}

END
